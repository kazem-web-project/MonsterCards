start my database:


1-
docker run -d --rm --name postgresdb -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -v pgdata:/var/lib/postgresql/data postgres

 docker exec -it postgresdb bash
 psql -U postgres


-- create a bd:
create database monster_cards;
\c monster_cards; 


CREATE OR REPLACE PROCEDURE delete_all_data()
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM users;
    DELETE FROM cards;
    DELETE FROM sessions;
    DELETE FROM stack;
END;
$$;

CALL delete_all_data();

-- tables:
drop table stack;
create table if not exists stack(
user_id int,
card_type varchar(10),
card_name varchar(20),
damage int
);
GRANT ALL ON stack TO server;

CREATE USER server WITH PASSWORD 'password';

drop table users;
drop table sessions;

create table if not exists users(
id SERIAL ,
username VARCHAR(50) PRIMARY KEY,
password VARCHAR(50),
stack_id int, 
coins int, 
stat int
	
);

create table if not exists sessions(
username varchar(50) primary key,
sessionId varchar(50),
created_time TIMESTAMP,
is_active bool,
battle_id int
);

-- user and permissions

GRANT ALL ON deck TO server;
GRANT ALL ON sessions TO server;
				--  RANT USAGE, SELECT ON SEQUENCE id TO server;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO server;

GRANT ALL ON users TO server;	

INSERT INTO  users( username, password, coins, stat) VALUES ('kazem', 'password', 20, 80);


DUMP:



**********************
stored procedures:

call manage_users_table();

CREATE OR REPLACE PROCEDURE manage_users_table()
LANGUAGE plpgsql
AS $$
BEGIN

    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'users' AND table_schema = 'public') THEN
        EXECUTE 'DROP TABLE users';
    END IF;


    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'users' AND table_schema = 'public') THEN
        CREATE TABLE users (
            id SERIAL,
            username VARCHAR(50) PRIMARY KEY,
            password VARCHAR(50),
            stack_id INT,
            coins INT,
            stat INT
        );
    END IF;


    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO server;


    GRANT ALL ON TABLE users TO server;
END;
$$;


==============================
CALL manage_sessions_table();



CREATE OR REPLACE PROCEDURE manage_sessions_table()
LANGUAGE plpgsql
AS $$
BEGIN
   
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'sessions' AND table_schema = 'public') THEN
        EXECUTE 'DROP TABLE sessions';
    END IF;


    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'sessions' AND table_schema = 'public') THEN
        CREATE TABLE sessions (
            username VARCHAR(50) PRIMARY KEY,
            sessionId VARCHAR(50),
            created_time TIMESTAMP,
            is_active BOOL,
            battle_id INT
        );
    END IF;

   
    GRANT ALL ON TABLE sessions TO server;

   
    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO server;

   
    INSERT INTO sessions (sessionId, username, created_time, is_active, battle_id)
    VALUES ('BC-68-45-0A-78-1B-6F-6A-28-17-26-AA-7B-AB-79-54', 'kienboec', NOW(), TRUE, 1);
END;
$$;



=========================
CALL manage_stack_table();


CREATE OR REPLACE PROCEDURE manage_stack_table()
LANGUAGE plpgsql
AS $$
BEGIN

    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'stack' AND table_schema = 'public') THEN
        EXECUTE 'DROP TABLE stack';
    END IF;


    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'stack' AND table_schema = 'public') THEN
        CREATE TABLE stack (
            user_id INT,
            card_type VARCHAR(10),
            card_name VARCHAR(20),
            damage INT
        );
    END IF;


    GRANT ALL ON TABLE stack TO server;


    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO server;
END;
$$;
















drop table if exists users;

create table if not exists users(
id SERIAL ,
username VARCHAR(50) PRIMARY KEY,
password VARCHAR(50),
stack_id int, 
coins int, 
stat int,
bio VARCHAR(50),
name VARCHAR(50),
image VARCHAR(50)
);

GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO server;

GRANT ALL ON users TO server;	

------------------------------

CALL manage_sessions_table();

drop table if exists sessions;

create table if not exists sessions(
username varchar(50) primary key,
session_pass varchar(50),
is_active bool
);

GRANT ALL ON sessions TO server;

GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO server;

INSERT INTO  sessions( sessionId, username, created_time,is_active,battle_id) VALUES ( 'BC-68-45-0A-78-1B-6F-6A-28-17-26-AA-7B-AB-79-54', 'kienboec', now(), true, 1);

----------------------------

drop table if exists cards;

create table if not exists cards(
id varchar(50) primary key,
Name varchar(50),
damage int,
owner varchar(50),
in_deck bool,
packet_number int
);

GRANT ALL ON cards TO server;

GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO server;


-------------------------------


CALL manage_stack_table();

drop table if exists stack;

create table if not exists stack(
user_id int,
card_type varchar(10),
card_name varchar(20),
damage int
);

GRANT ALL ON stack TO server;

GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO server;



